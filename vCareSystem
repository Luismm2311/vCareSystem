#!/bin/bash
clear
set -e
#
#
#_______________________________________________
#THIS IS THE Terminal Version of vCoreSystem
#_______________________________________________
# Name   : vCoreSystem
# Licence: GPL3 (http://www.gnu.org/licenses/gpl.html)
# Author : Luismm2311
# WebSite: http://utappia.org
# Email  : salih-(at)-utappia.org
# Date   : 05-03-2020 (first release 19-02-2009)
# Version: 20.03.0
# System : Ubuntu Linux and derivatives. Partial support for Debian
# Description:
#This simple script will automatically refresh your package list, download and install
#updates (if there are any),
#remove any remaining packages and configuration files without interference.
#
## Script starts here

#Variables
DIST_CODENAME=$(lsb_release --codename | cut -f2)
DATE=(date +%F_%T)
UCARE_VERSION=(20.03.0)

# Checking if the user has run the script with "sudo" or not
if [[ $EUID -ne 0 ]] ; then
    clear
    echo ""
    echo "vCoreSystem must be run as root or with sudo. Now I will just exit..." 1>&2
    echo ""
    sleep 2
    exit 1
fi
REQUIRED_PKG="nala"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "Please install nala:"
  echo "https://gitlab.com/volian/nala#installation"
  sleep 5
  exit 1
fi
REQUIRED_PKG="deborphan"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
  sudo nala install $REQUIRED_PKG -y
fi
function WELCOME_SCREEN {
	echo "_______________________________________________________"
	echo "                                                       "
	echo "                  vCoreSystem                          "
	echo "            ~~~~~~~~~~~~~~~~~~~~~                      "
	echo "                                                       "
	echo " Welcome to all-in-one System Update and maintenance   "
	echo " assistant script.                                     "
	echo "                                                       "
	echo "                                                       "
	echo " This simple script will automatically         	     "
	echo " Checks for the fastest mirros,refresh                 "
	echo " your packagelist, download and                        "
	echo " install updates (if there are any), remove any old    "
	echo " kernels, obsolete packages and configuration files    "
	echo " to free up disk space, without any need of user       "
	echo " interference                                          "
	echo "_______________________________________________________"
	echo
	echo " vCoreSystem will start in 5 seconds... "
	sleep 5
}

function MAINTENACE {
	echo
	echo
	echo "#########################"
	echo "          Starting"
	echo "#########################"
	echo
	echo
	sudo nala fetch --auto -y
	echo 
	echo
	echo "##########################"
	echo " Found the best mirrors"
	echo "##########################"
	echo
	echo
	## Updates packages and libraries
	sudo nala upgrade --purge -y;
	echo
	echo "###############################################"
	echo "Finished updating packages, system libraries,"
	echo "       andremoving unneeded packages "
	echo "###############################################"
	sleep 1
	echo

	## Removes unneeded packages
	
	echo					# for the time being I use old implementation
	sleep 1
	echo

	# purge-old-kernels - remove old kernel packages
	#    Copyright (C) 2012 Dustin Kirkland <kirkland -(at)- ubuntu.com>
	#
	#    Authors: Dustin Kirkland <kirkland-(at)-ubuntu.com>
	#             Kees Cook <kees-(at)-ubuntu.com>
	#
	# NOTE: This script will ALWAYS keep the currently running kernel
	# NOTE: Default is to keep 2 more, user overrides with --keep N
	KEEP=2
	# NOTE: Any unrecognized option will be passed straight through to apt
	APT_OPTS=
	while [ ! -z "$1" ]; do
		case "$1" in
			--keep)
				# User specified the number of kernels to keep
				KEEP="$2"
				shift 2
			;;
			*)
				APT_OPTS="$APT_OPTS $1"
				shift 1
			;;
		esac
	done

	# Build our list of kernel packages to purge
	CANDIDATES=$(ls -tr /boot/vmlinuz-* | head -n -${KEEP} | grep -v "$(uname -r)$" | cut -d- -f2- | awk '{print "linux-image-" $0 " linux-headers-" $0}' )
	for c in $CANDIDATES; do
		dpkg-query -s "$c" >/dev/null 2>&1 && PURGE="$PURGE $c"
	done

	if [ -z "$PURGE" ]; then
		echo "No kernels are eligible for removal"
	fi

	sudo apt $APT_OPTS remove $PURGE;

	echo
	echo "###################################"
	echo "Finished removing old kernels"
	echo "###################################"
	sleep 1
	echo
	## Removes unused config files
	sudo deborphan -n --find-config | xargs sudo apt-get -y --purge autoremove;
	echo
	echo "#####################################"
	echo "Finished removing unused config files"
	echo "#####################################"
	sleep 1
	echo

	## Removes package files that can no longer be downloaded and everything except
	# the lock file in /var/cache/apt/archives, including directories.
	sudo apt clean;
	echo
	echo "######################################"
	echo " Cleaned downloaded temporary packages"
	echo "######################################"
	echo
	sleep 1

	echo
	echo "#########################################"
	echo " Checking to see if a reboot is required "
	echo "#########################################"
	echo
	## Check to see if a reboot is required
	if [ -f /var/run/reboot-required ]; then
 		echo
  		echo "* * * * * * * * * * * * * * * * * *"
 		echo "*                                 *"
 		echo "* Consider rebooting your system  *"
  		echo "* to finish applying updates      *"
  		echo "*                                 *"
  		echo "* * * * * * * * * * * * * * * * * *"
  		echo
	fi


}

function UPGRADE_EOL_TO_NEXT {

cp "/etc/apt/sources.list" "/etc/apt/sources.eol_${DATE}"
cat <<EOT > /etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-security main restricted universe multiverse

EOT

sudo nala install update-manager-core
sudo apt -y dist-upgrade
sudo do-release-upgrade
}

function UPGRADE_TO_NEXT_RELEASE {
	sleep 1
	echo "##########################################"
	echo "vCoreSystem will now check for the        "
	echo "availabillity of the next version         "
	echo "and it will start the upgrade             "
	echo "##########################################"
	echo ""
	sleep 1
	do-release-upgrade
	sleep 2
}

function UPGRADE_TO_DEVEL_RELEASE {
	sleep 1
	echo "##########################################"
	echo "vCoreSystem will now check for the        "
	echo "availabillity of the next development     "
	echo "version and it will start the upgrade     "
	echo "##########################################"
	echo ""
	sleep 1
	do-release-upgrade -d
	sleep 2
}

function SHOW_HELP {
	cat << EOF
	
				vCoreSystem
				    ~ $UCARE_VERSION ~
		     All-in-one system update and maintenance app

	Usage: sudo vCoreSystem-core <parameter> 
	
	If no parameter is specified, it will just do the regular
	maintenance:

		* Checks for the fastest mirros
		* Updates the list of available packages
		* Downloads and installs the available updates
		* Checks if there are older Linux kernels on the system and removes them. However it keeps the current and one previous version of the kernel.
		* Cleans the cache of the downloaded packages
		* Removes obsolete packages
		* Removes orphan packets
		* Deletes package configuration files from packages that have been uninstalled by you.
	 
	Parameter:	 
		 -h          display this help and exit
		 
		 -u          Upgrade to the next release. Note: If you use a
		             regular release it will upgrade to the next one. If
		             you are on a LTS version, it will upgrade only to 
		             the next LTS.
		             
		 -d          Upgrade to the next development release

		 -eol        CAUTION: Do not use this if your Ubuntu has not 
			     reached its End of life support.
				    Check https://wiki.ubuntu.com/Releases
			     This option is for Ubuntu releases that have
			     reached their EOL and the user wants to upgrade
			     it to the next supported version.
		 
		 -r          After completing all the tasks, reboot the system if needed.		 
		 -s	         After completing all the tasks, shutdown the system.

EOF
}

function GOODBYE {
	sleep 2
	echo
	echo
	echo "#########################"
	echo "   All Done... GOODBYE"
	echo "#########################"
}

function SHUT_DOWN {
	sleep 1
	echo
	echo
	echo "#########################"
	echo "      Shutting down"
	echo "#########################"
	sudo shutdown now
}

function RE_BOOT {
	sleep 1
	echo
	if [ -f /var/run/reboot-required ]; then
		echo "#########################"
		echo "      Rebooting"
		echo "#########################"
		sudo reboot
	else
		echo "#########################"
		echo "    No reboot required"
		echo "#########################"
		GOODBYE
	fi
	## End of script
}

# The main process starts
while [ "$1" != "" ]; do
    case $1 in
        -u | --upgrade )     WELCOME_SCREEN && MAINTENACE && UPGRADE_TO_NEXT_RELEASE
                             exit
                                ;;
        -d | --development ) WELCOME_SCREEN && MAINTENACE && UPGRADE_TO_DEVEL_RELEASE
                             exit
                                ;;
        -h | --help )        SHOW_HELP
                             exit
                                ;;
        -eol | --end-of-life-upgrade ) UPGRADE_EOL_TO_NEXT
                             exit
                                ;;
	-s | --shutdown )	 WELCOME_SCREEN && MAINTENACE && GOODBYE && SHUT_DOWN
							 exit
							    ;;
	-r | --reboot )		 WELCOME_SCREEN && MAINTENACE && GOODBYE && RE_BOOT
							 exit
							    ;;
        * )                  SHOW_HELP
                             exit 1
    esac
done
## If no parameter is given just do the regular maintenance
WELCOME_SCREEN && MAINTENACE && GOODBYE
